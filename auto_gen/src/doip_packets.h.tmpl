#ifndef __DOIP_PACKETS_H__
#define __DOIP_PACKETS_H__
#include <memory>
#include <stdint.h>
#include <vector>

#define DOIP_TBOX_LOGICAL_ADDRESS 0x0005
#define DOIP_TBOX_FUNCTION_ADDRESS 0xE400

class Doip_Packet
{
public:
    Doip_Packet() = default;
    Doip_Packet(uint8_t *buf, uint32_t length);
    Doip_Packet(Doip_Packet&& packet);
    virtual ~Doip_Packet();
    virtual int deserialize(void);
    virtual int serialize(void);
    uint8_t protocol_version = 0x2;
    uint8_t protocol_version_inv = ~0x2;
    uint16_t payloadType = 0x0;
    uint32_t payloadLength = 0x0;
    std::vector<uint8_t> *buffer = nullptr;
    uint32_t parse_index = 0;
protected:
    const uint32_t exp_payloadLength = 8;
};

% for packet in s_packets:
/*
 * Packet: ${packet["name"]}
 */
<%
context_packets[packet["name"]] = packet
%>
class ${packet["name"]} : public ${packet["parent"]}
{
public:
    ${packet["name"]}(
## construct parent's constructor's argument list
    % if packet["parent"] in context_packets:
        % for element in context_packets[packet["parent"]]["elements"]:
        ${element["type"]} ${'&&' if element["type"]=="std::vector<uint8_t>" else ''}${element["name"]},
        % endfor
    % endif
## construct constructor's argument list
    % for element in packet["elements"]:
        ${element["type"]} ${'&&' if element["type"]=="std::vector<uint8_t>" else ''}${element["name"]}\
${',' if loop.last==False else ');'}
    % endfor
    ${packet["name"]}(${packet["name"]} &&packet);
    ${packet["name"]}(${packet["parent"]} &&packet);
    virtual int deserialize(void);
    virtual int serialize(void);

    % for element in packet["elements"]:
    ${element["type"]} ${element["name"]};
    % endfor
    const uint32_t exp_payloadLength = \
    % for element in packet["elements"]:
${element["length"]}\
${' + ' if loop.last==False else ';'}\
    % endfor

};
% endfor

class DoipRequestHandler
{
public:
    virtual int process(std::shared_ptr<Doip_Packet>, uint16_t addr) = 0;
};

class DoipResponseHandler
{
public:
    virtual int process(std::vector<uint8_t> *buf, uint16_t addr) = 0;
};
#endif
